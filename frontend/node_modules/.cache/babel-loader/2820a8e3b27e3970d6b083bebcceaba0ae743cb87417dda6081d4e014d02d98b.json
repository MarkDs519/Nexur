{"ast":null,"code":"// handler api\nconst handlerapi=creds=>{let params={ccPrivateKey:creds.privateKey};var validator=require('./validator.js');var validate=validator();// handler function\nvar handlerInp={params:params,// get request to fetch the URL with the parameters \nget:async(url,params)=>{try{let res=await fetch(url,params);let result=res.json();console.log(\"Result: \",result);console.log(\"Successfully fetched \",url,\"with parameters \",params);return result;}catch(err){console.log(\"Failed to fetch \",url,\"with parameters \",params);console.log(err);}return false;},// connect to azure database server\nconnectAzureServer:async data=>{let parameters={method:\"POST\",mode:\"cors\",//redirect: 'follow',\nbody:JSON.stringify(data),headers:{'Accept':'application/json','Content-Type':'application/json'}};let response=await handlerInp.get(\"/Register/posts\",parameters);return response;},// add user to Azure db\naddUserAzure:async(signUpData,setSignUpData)=>{try{let response=await handlerInp.connectAzureServer(signUpData);setSignUpData([response]);//console.log(signUpData);\nreturn signUpData;}catch(err){console.log(\"Failed to insert data to Azure - \",err);}return false;},// connect to ChatEngine\nconnectChatEngineServer:async data=>{let parameters={method:\"POST\",mode:\"cors\",body:JSON.stringify(data),headers:{'Accept':'application/json','Content-Type':'application/json','PRIVATE-KEY':params.ccPrivateKey}};let respose=await handlerInp.get('https://api.chatengine.io/users/',parameters);return respose;},// signUp also adds the user to ChatEngine server\naddUserChatEngine:async(event,signUpData)=>{console.log(\"Event: \",event);var data={username:signUpData.username,secret:handlerInp.generateSecretKey(),email:signUpData.email,first_name:signUpData.firstname,last_name:signUpData.lastname};try{let response=await handlerInp.connectChatEngineServer(data);return response;//console.log(\"ChitChat Data: \", data);\n//return data;\n}catch(err){console.log(\"Failed to insert data to ChatEngine - \",error);}return false;},// file upload handler\nfileSubmit:async(event,file)=>{event.preventDefault();try{const formData=new FormData();formData.append('file',file);//console.log(\"Successfully added file: \", file);\n//formData.append('fileName', file.name);\nconsole.log(formData);const parameters={method:\"POST\",mode:\"cors\",body:JSON.stringify(formData),headers:{'Accept':'application/json','Content-Type':'multipart/form-data'}};let response=await handlerInp.get('/printr/uploadFile',parameters);console.log(response);return response;}catch(err){console.log(\"Failed to Upload file - \",err);}return false;},// sign in handler\nhandleSignInInputChange:(event,signInData,setData)=>{event.preventDefault();// change the state as the user types in the data and simultaneously insert the values inside the state\nconst newData={...signInData};// USERNAME VALIDATION\nif(event.target.name===\"username\"){if(validate.isValidUsername(event)===true){newData[event.target.name]=event.target.value;// set username valid to true\nnewData[\"usernameValid\"]=true;}else{newData[\"usernameValid\"]=false;}}// PASSWORD VALIDATION\nif(event.target.name===\"password\"){if(validate.isValidPassword(event)===true){newData[event.target.name]=event.target.value;// set username valid to true\nnewData[\"passwordValid\"]=true;}else{newData[\"passwordValid\"]=false;}}// check if Remember me checkboc is checked and set the state of the checkbox to true\nevent.target.name===\"rememberCheckbox\"?newData[event.target.name]=event.target.checked:newData[event.target.name]=event.target.value;console.log(newData);setData(newData);},// sign up handler\nhandleSignUpInputChange:(event,signUpData,setData)=>{event.preventDefault();const newSignUpData={...signUpData};// EMAIL VALIDATION\nif(event.target.name===\"email\"){if(validate.isValidEmail(event)===true){newSignUpData[event.target.name]=event.target.value;newSignUpData[\"emailValid\"]=true;}else{console.log(\"Length of email: \",newSignUpData[event.target.name].length);newSignUpData[\"emailValid\"]=false;}}// USERNAME VALIDATION\nif(event.target.name===\"username\"){if(validate.isValidUsername(event)===true){newSignUpData[event.target.name]=event.target.value;// set username valid to true\nnewSignUpData[\"usernameValid\"]=true;}else{newSignUpData[\"usernameValid\"]=false;}}// PASSWORD VALIDATION\nif(event.target.name===\"password\"){if(validate.isValidPassword(event)===true){newSignUpData[event.target.name]=event.target.value;// set username valid to true\nnewSignUpData[\"passwordValid\"]=true;}else{newSignUpData[\"passwordValid\"]=false;}}// for all other things\nnewSignUpData[event.target.name]=event.target.value;console.log(newSignUpData);setData(newSignUpData);//return newSignUpData;  \n},generateSecretKey:()=>{let secret=(Math.random()+1).toString(36).substring(2);return secret;}};return handlerInp;};module.exports=handlerapi;","map":{"version":3,"names":["handlerapi","creds","params","ccPrivateKey","privateKey","validator","require","validate","handlerInp","get","url","res","fetch","result","json","console","log","err","connectAzureServer","data","parameters","method","mode","body","JSON","stringify","headers","response","addUserAzure","signUpData","setSignUpData","connectChatEngineServer","respose","addUserChatEngine","event","username","secret","generateSecretKey","email","first_name","firstname","last_name","lastname","error","fileSubmit","file","preventDefault","formData","FormData","append","handleSignInInputChange","signInData","setData","newData","target","name","isValidUsername","value","isValidPassword","checked","handleSignUpInputChange","newSignUpData","isValidEmail","length","Math","random","toString","substring","module","exports"],"sources":["/Users/markdhrubasikder/Documents/Projects/Nexur/frontend/src/handler.api.js"],"sourcesContent":["// handler api\n\nconst handlerapi = (creds) => {\n    let params = {\n        ccPrivateKey: creds.privateKey\n    }\n    var validator = require('./validator.js');\n    var validate = validator();\n    // handler function\n    var handlerInp = {\n        params: params,\n        // get request to fetch the URL with the parameters \n        get: async(url, params) => {\n            try{\n                let res = await fetch(url, params);\n                let result = res.json();\n                console.log(\"Result: \", result);\n                console.log(\"Successfully fetched \", url, \"with parameters \", params);\n                return result;\n            }\n            catch(err){\n                console.log(\"Failed to fetch \", url, \"with parameters \", params);\n                console.log(err);\n            }\n            return false;\n        },\n        // connect to azure database server\n        connectAzureServer: async(data) => {\n            let parameters = {\n                method: \"POST\",\n                mode: \"cors\", \n                //redirect: 'follow',\n                body: JSON.stringify(data),\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                }\n            };\n            let response = await handlerInp.get(\"/Register/posts\", parameters);\n            return response;\n        },\n\n        // add user to Azure db\n        addUserAzure: async(signUpData, setSignUpData) => {\n            try{\n                let response = await handlerInp.connectAzureServer(signUpData);\n                setSignUpData([response]);\n                //console.log(signUpData);\n                return signUpData;\n            }\n            catch(err){\n                console.log(\"Failed to insert data to Azure - \", err);\n            }\n            return false;\n        },\n\n        // connect to ChatEngine\n        connectChatEngineServer: async(data) => {\n            let parameters = {\n                method: \"POST\",\n                mode: \"cors\", \n                body: JSON.stringify(data),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'PRIVATE-KEY': params.ccPrivateKey\n                }\n            };\n            let respose = await handlerInp.get('https://api.chatengine.io/users/', parameters);\n            return respose;\n        },\n\n        // signUp also adds the user to ChatEngine server\n        addUserChatEngine: async(event, signUpData) => {\n            console.log(\"Event: \", event);\n            var data = {\n                username: signUpData.username,\n                secret: handlerInp.generateSecretKey(),\n                email: signUpData.email,\n                first_name: signUpData.firstname,\n                last_name: signUpData.lastname\n            };\n            try{\n                let response = await handlerInp.connectChatEngineServer(data)\n                return response;\n                //console.log(\"ChitChat Data: \", data);\n                //return data;\n            }\n            catch(err){\n                console.log(\"Failed to insert data to ChatEngine - \", error);\n            }\n            return false;\n\n        },\n\n        // file upload handler\n        fileSubmit: async(event, file) => {\n            event.preventDefault();\n            try{\n                const formData = new FormData();\n                formData.append('file', file);\n                //console.log(\"Successfully added file: \", file);\n                //formData.append('fileName', file.name);\n                console.log(formData);\n                const parameters = {\n                    method: \"POST\",\n                    mode: \"cors\", \n                    body: JSON.stringify(formData),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'multipart/form-data',\n                    },\n                };\n                let response = await handlerInp.get('/printr/uploadFile', parameters);\n                console.log(response);\n                return response;\n            }catch(err){\n                console.log(\"Failed to Upload file - \", err);\n            }\n            return false;\n            \n        },\n\n        // sign in handler\n        handleSignInInputChange: (event, signInData, setData) => {\n            event.preventDefault();\n            // change the state as the user types in the data and simultaneously insert the values inside the state\n            const newData = {...signInData};\n            // USERNAME VALIDATION\n            if(event.target.name === \"username\"){\n                if(validate.isValidUsername(event)===true){\n                    newData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newData[\"usernameValid\"] = true;\n                }\n                else{\n                    newData[\"usernameValid\"] = false;\n                }\n            }\n\n            // PASSWORD VALIDATION\n            if(event.target.name === \"password\"){\n                if(validate.isValidPassword(event)===true){\n                    newData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newData[\"passwordValid\"] = true;\n                }\n                else{\n                    newData[\"passwordValid\"] = false;\n                }\n            }\n\n            // check if Remember me checkboc is checked and set the state of the checkbox to true\n            event.target.name === \"rememberCheckbox\" ? newData[event.target.name] = event.target.checked : newData[event.target.name] = event.target.value;\n            console.log(newData);\n            setData(newData);\n        },\n        // sign up handler\n        handleSignUpInputChange: (event, signUpData, setData) => {\n            event.preventDefault();\n            const newSignUpData = {...signUpData};\n            // EMAIL VALIDATION\n            if(event.target.name === \"email\"){\n                if(validate.isValidEmail(event)===true){\n                    newSignUpData[event.target.name]=event.target.value;\n                    newSignUpData[\"emailValid\"]=true;\n\n                } else{\n                    console.log(\"Length of email: \", newSignUpData[event.target.name].length)\n                    newSignUpData[\"emailValid\"] = false\n                }\n            }\n\n            // USERNAME VALIDATION\n            if(event.target.name === \"username\"){\n                if(validate.isValidUsername(event)===true){\n                    newSignUpData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newSignUpData[\"usernameValid\"] = true;\n                }\n                else{\n                    newSignUpData[\"usernameValid\"] = false;\n                }\n            }\n\n            // PASSWORD VALIDATION\n            if(event.target.name === \"password\"){\n                if(validate.isValidPassword(event)===true){\n                    newSignUpData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newSignUpData[\"passwordValid\"] = true;\n                }\n                else{\n                    newSignUpData[\"passwordValid\"] = false;\n                }\n            }\n\n            // for all other things\n            newSignUpData[event.target.name] = event.target.value;\n            console.log(newSignUpData);\n            setData(newSignUpData);\n            //return newSignUpData;  \n        },\n        generateSecretKey: () => {\n            let secret = (Math.random() + 1).toString(36).substring(2);\n            return secret\n        }\n    }\n    return handlerInp;\n    \n}\n\n\n\nmodule.exports = handlerapi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}