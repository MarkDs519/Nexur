{"ast":null,"code":"// handler api\n\nconst handlerapi = creds => {\n  let params = {\n    ccPrivateKey: creds.privateKey\n  };\n  var validator = require('./validator.js');\n  var validate = validator();\n  // handler function\n  var handlerInp = {\n    params: params,\n    // get request to fetch the URL with the parameters \n    get: async (url, params) => {\n      try {\n        let res = await fetch(url, params);\n        let result = res.json();\n        console.log(\"Successfully fetched \", url, \"with parameters \", params);\n        return result;\n      } catch (err) {\n        console.log(\"Failed to fetch \", url, \"with parameters \", params);\n        console.log(err);\n      }\n      return false;\n    },\n    // connect to azure database server\n    connectAzureServer: async data => {\n      let parameters = {\n        method: \"POST\",\n        mode: \"cors\",\n        //redirect: 'follow',\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      let response = await handlerInp.get(\"/Register/posts\", parameters);\n      return response;\n    },\n    // add user to Azure db\n    addUserAzure: async (signUpData, setSignUpData) => {\n      try {\n        let response = await handlerInp.connectAzureServer(signUpData);\n        setSignUpData([response]);\n        //console.log(signUpData);\n        return signUpData;\n      } catch (err) {\n        console.log(\"Failed to insert data to Azure: \", err);\n      }\n      return false;\n    },\n    // connect to ChatEngine\n    connectChatEngineServer: async data => {\n      let parameters = {\n        method: \"POST\",\n        mode: \"cors\",\n        body: JSON.stringify(data),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'PRIVATE-KEY': params.ccPrivateKey\n        }\n      };\n      let respose = await handlerInp.get('https://api.chatengine.io/users/', parameters);\n      return respose;\n    },\n    // signUp also adds the user to ChatEngine server\n    addUserChatEngine: async (event, signUpData) => {\n      console.log(\"Event: \", event);\n      var data = {\n        username: signUpData.username,\n        secret: handlerInp.generateSecretKey(),\n        email: signUpData.email,\n        first_name: signUpData.firstname,\n        last_name: signUpData.lastname\n      };\n      try {\n        let response = await handlerInp.connectChatEngineServer(data);\n        return response;\n        //console.log(\"ChitChat Data: \", data);\n        //return data;\n      } catch (err) {\n        console.log(\"Failed to insert data to ChatEngine: \", error);\n      }\n      return false;\n    },\n    // file upload handler\n    fileSubmit: async (event, file) => {\n      event.preventDefault();\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n        console.log(\"Successfully added file: \", file);\n        formData.append('fileName', file.name);\n        const parameters = {\n          method: \"POST\",\n          mode: \"cors\",\n          headers: {\n            'content-type': 'multipart/form-data'\n          }\n        };\n        let response = await handlerInp.get('/Printr/uploadFile', parameters);\n        console.log(response);\n        return response;\n      } catch (err) {\n        console.log(\"Failed to Upload file with error: \", err);\n      }\n      return false;\n    },\n    // sign in handler\n    handleSignInInputChange: (event, signInData, setData) => {\n      event.preventDefault();\n      // change the state as the user types in the data and simultaneously insert the values inside the state\n      const newData = {\n        ...signInData\n      };\n      // USERNAME VALIDATION\n      if (event.target.name === \"username\") {\n        if (validate.isValidUsername(event) === true) {\n          newData[event.target.name] = event.target.value;\n          // set username valid to true\n          newData[\"usernameValid\"] = true;\n        } else {\n          newData[\"usernameValid\"] = false;\n        }\n      }\n\n      // PASSWORD VALIDATION\n      if (event.target.name === \"password\") {\n        if (validate.isValidPassword(event) === true) {\n          newData[event.target.name] = event.target.value;\n          // set username valid to true\n          newData[\"passwordValid\"] = true;\n        } else {\n          newData[\"passwordValid\"] = false;\n        }\n      }\n\n      // check if Remember me checkboc is checked and set the state of the checkbox to true\n      event.target.name === \"rememberCheckbox\" ? newData[event.target.name] = event.target.checked : newData[event.target.name] = event.target.value;\n      console.log(newData);\n      setData(newData);\n    },\n    // sign up handler\n    handleSignUpInputChange: (event, signUpData, setData) => {\n      event.preventDefault();\n      const newSignUpData = {\n        ...signUpData\n      };\n      // EMAIL VALIDATION\n      if (event.target.name === \"email\") {\n        if (validate.isValidEmail(event) === true) {\n          newSignUpData[event.target.name] = event.target.value;\n          newSignUpData[\"emailValid\"] = true;\n        } else {\n          console.log(\"Length of email: \", newSignUpData[event.target.name].length);\n          newSignUpData[\"emailValid\"] = false;\n        }\n      }\n\n      // USERNAME VALIDATION\n      if (event.target.name === \"username\") {\n        if (validate.isValidUsername(event) === true) {\n          newSignUpData[event.target.name] = event.target.value;\n          // set username valid to true\n          newSignUpData[\"usernameValid\"] = true;\n        } else {\n          newSignUpData[\"usernameValid\"] = false;\n        }\n      }\n\n      // PASSWORD VALIDATION\n      if (event.target.name === \"password\") {\n        if (validate.isValidPassword(event) === true) {\n          newSignUpData[event.target.name] = event.target.value;\n          // set username valid to true\n          newSignUpData[\"passwordValid\"] = true;\n        } else {\n          newSignUpData[\"passwordValid\"] = false;\n        }\n      }\n\n      // for all other things\n      newSignUpData[event.target.name] = event.target.value;\n      console.log(newSignUpData);\n      setData(newSignUpData);\n      //return newSignUpData;  \n    },\n    generateSecretKey: () => {\n      let secret = (Math.random() + 1).toString(36).substring(2);\n      return secret;\n    }\n  };\n  return handlerInp;\n};\nmodule.exports = handlerapi;","map":{"version":3,"names":["handlerapi","creds","params","ccPrivateKey","privateKey","validator","require","validate","handlerInp","get","url","res","fetch","result","json","console","log","err","connectAzureServer","data","parameters","method","mode","body","JSON","stringify","headers","response","addUserAzure","signUpData","setSignUpData","connectChatEngineServer","respose","addUserChatEngine","event","username","secret","generateSecretKey","email","first_name","firstname","last_name","lastname","error","fileSubmit","file","preventDefault","formData","FormData","append","name","handleSignInInputChange","signInData","setData","newData","target","isValidUsername","value","isValidPassword","checked","handleSignUpInputChange","newSignUpData","isValidEmail","length","Math","random","toString","substring","module","exports"],"sources":["/Users/markdhrubasikder/Documents/Projects/NodeJS/webserver/frontend/src/handler.api.js"],"sourcesContent":["// handler api\n\nconst handlerapi = (creds) => {\n    let params = {\n        ccPrivateKey: creds.privateKey\n    }\n    var validator = require('./validator.js');\n    var validate = validator();\n    // handler function\n    var handlerInp = {\n        params: params,\n        // get request to fetch the URL with the parameters \n        get: async(url, params) => {\n            try{\n                let res = await fetch(url, params);\n                let result = res.json();\n                console.log(\"Successfully fetched \", url, \"with parameters \", params);\n                return result;\n            }\n            catch(err){\n                console.log(\"Failed to fetch \", url, \"with parameters \", params);\n                console.log(err);\n            }\n            return false;\n        },\n        // connect to azure database server\n        connectAzureServer: async(data) => {\n            let parameters = {\n                method: \"POST\",\n                mode: \"cors\", \n                //redirect: 'follow',\n                body: JSON.stringify(data),\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                }\n            };\n            let response = await handlerInp.get(\"/Register/posts\", parameters);\n            return response;\n        },\n\n        // add user to Azure db\n        addUserAzure: async(signUpData, setSignUpData) => {\n            try{\n                let response = await handlerInp.connectAzureServer(signUpData);\n                setSignUpData([response]);\n                //console.log(signUpData);\n                return signUpData;\n            }\n            catch(err){\n                console.log(\"Failed to insert data to Azure: \", err);\n            }\n            return false;\n        },\n\n        // connect to ChatEngine\n        connectChatEngineServer: async(data) => {\n            let parameters = {\n                method: \"POST\",\n                mode: \"cors\", \n                body: JSON.stringify(data),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'PRIVATE-KEY': params.ccPrivateKey\n                }\n            };\n            let respose = await handlerInp.get('https://api.chatengine.io/users/', parameters);\n            return respose;\n        },\n\n        // signUp also adds the user to ChatEngine server\n        addUserChatEngine: async(event, signUpData) => {\n            console.log(\"Event: \", event);\n            var data = {\n                username: signUpData.username,\n                secret: handlerInp.generateSecretKey(),\n                email: signUpData.email,\n                first_name: signUpData.firstname,\n                last_name: signUpData.lastname\n            };\n            try{\n                let response = await handlerInp.connectChatEngineServer(data)\n                return response;\n                //console.log(\"ChitChat Data: \", data);\n                //return data;\n            }\n            catch(err){\n                console.log(\"Failed to insert data to ChatEngine: \", error);\n            }\n            return false;\n\n        },\n\n        // file upload handler\n        fileSubmit: async(event, file) => {\n            event.preventDefault();\n            try{\n                const formData = new FormData();\n                formData.append('file', file);\n                console.log(\"Successfully added file: \", file);\n                formData.append('fileName', file.name);\n                const parameters = {\n                    method: \"POST\",\n                    mode: \"cors\", \n                    headers: {\n                        'content-type': 'multipart/form-data',\n                    },\n                };\n                let response = await handlerInp.get('/Printr/uploadFile', parameters);\n                console.log(response);\n                return response;\n            }catch(err){\n                console.log(\"Failed to Upload file with error: \", err);\n            }\n            return false;\n            \n        },\n\n        // sign in handler\n        handleSignInInputChange: (event, signInData, setData) => {\n            event.preventDefault();\n            // change the state as the user types in the data and simultaneously insert the values inside the state\n            const newData = {...signInData};\n            // USERNAME VALIDATION\n            if(event.target.name === \"username\"){\n                if(validate.isValidUsername(event)===true){\n                    newData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newData[\"usernameValid\"] = true;\n                }\n                else{\n                    newData[\"usernameValid\"] = false;\n                }\n            }\n\n            // PASSWORD VALIDATION\n            if(event.target.name === \"password\"){\n                if(validate.isValidPassword(event)===true){\n                    newData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newData[\"passwordValid\"] = true;\n                }\n                else{\n                    newData[\"passwordValid\"] = false;\n                }\n            }\n\n            // check if Remember me checkboc is checked and set the state of the checkbox to true\n            event.target.name === \"rememberCheckbox\" ? newData[event.target.name] = event.target.checked : newData[event.target.name] = event.target.value;\n            console.log(newData);\n            setData(newData);\n        },\n        // sign up handler\n        handleSignUpInputChange: (event, signUpData, setData) => {\n            event.preventDefault();\n            const newSignUpData = {...signUpData};\n            // EMAIL VALIDATION\n            if(event.target.name === \"email\"){\n                if(validate.isValidEmail(event)===true){\n                    newSignUpData[event.target.name]=event.target.value;\n                    newSignUpData[\"emailValid\"]=true;\n\n                } else{\n                    console.log(\"Length of email: \", newSignUpData[event.target.name].length)\n                    newSignUpData[\"emailValid\"] = false\n                }\n            }\n\n            // USERNAME VALIDATION\n            if(event.target.name === \"username\"){\n                if(validate.isValidUsername(event)===true){\n                    newSignUpData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newSignUpData[\"usernameValid\"] = true;\n                }\n                else{\n                    newSignUpData[\"usernameValid\"] = false;\n                }\n            }\n\n            // PASSWORD VALIDATION\n            if(event.target.name === \"password\"){\n                if(validate.isValidPassword(event)===true){\n                    newSignUpData[event.target.name] = event.target.value;\n                    // set username valid to true\n                    newSignUpData[\"passwordValid\"] = true;\n                }\n                else{\n                    newSignUpData[\"passwordValid\"] = false;\n                }\n            }\n\n            // for all other things\n            newSignUpData[event.target.name] = event.target.value;\n            console.log(newSignUpData);\n            setData(newSignUpData);\n            //return newSignUpData;  \n        },\n        generateSecretKey: () => {\n            let secret = (Math.random() + 1).toString(36).substring(2);\n            return secret\n        }\n    }\n    return handlerInp;\n    \n}\n\n\n\nmodule.exports = handlerapi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}